DESCRIP = Overall makefile

# Destination directory
DESTDIR = $(HOME)
INCLUDEDIR = $(DESTDIR)/include
LIBDIR = $(DESTDIR)/lib

# Source Code
AUX     = Makefile
HDRS    = 
SRCCCS =
SRCS    = 
CODE    = $(HDRS) $(SRCS)
SOURCE  = $(AUX) $(HDRS) $(SRCS)
SUBDIRS	=

# Object Code
OBJECT  =
OBJECT	= 
LIBA    =

# Longevity Classes
TRASH   = core trash
TMP     = $(OBJECT)
FINAL   = $(LIBA) tags
.PRECIOUS: $(TMP) $(FINAL)

# Compilation Parameters
CPPDEFINES= -D_INLINE=" "
CPPINCLUDES = -I. -I$(INCLUDEDIR)
LIBPATH = 
DEBUG = -g
LIBS = $(LIBPATH)
#CFLAGS  = -g $(CPPDEFINES) $(CPPINCLUDES)
CFLAGS  = -std=c++11 $(CPPDEFINES) $(CPPINCLUDES) $(DEBUG)
CCFLAGS	= $(CFLAGS)
CC	= g++
#CC	= insure
#	SUBCOMS controls which targets get propagated to subdirectorys
SUBCOMS = config install clean spotless
#	SUBCOM implements the subdirectory propagation mechanism
SUBCOM  = @ for i in $(SUBDIRS);                                         \
	  do                                                             \
	  ( echo cd $$i; cd $$i; $(MAKE) $(MFLAGS) $@; echo done $$i; ); \
	  done
SUBALL  = @ for i in $(SUBDIRS);                                         \
	  do                                                             \
	  ( echo cd $$i; cd $$i; $(MAKE) $(MFLAGS); echo done $$i; );    \
	  done



# Compilation Targets
install :: all
all     :: $(LIBA)
	make -C MDP_Package install
	make -C DTM_Package install
	make -C DTMAnalytics
	make -C DTMBuilder
	make -C DTMIBuilder
	make -C DTMLearning
	make -C DTMScenarioMatch
	make -C DTMSelfLoop
	make -C DTMTesting
	make -C DTMTrajectoryEvaluation
	make -C DTMMakePNG
	make -C DTMMakeSeqMap
#	$(SUBALL)


win:
	export WINEDEBUG=-all && wine cmd /c compile.bat

#.SUFFIXES   :   .o .c .cc
#
#.c.o:
#	$(CC) $(CFLAGS) -c $<
#
#.cc.o:
#	$(CC) $(CCFLAGS) -c $<
#


$(LIBA)	: $(OBJECT)
	ar r $(LIBA) $(OBJECT)
	ranlib $(LIBA)
	cp $(HDRS) $(INCLUDEDIR)
	cp $(LIBA) $(LIBDIR)

$(SUBCOMS) ::
#	$(SUBCOM)

code    :: $(CODE)
source  :: $(SOURCE)

# Compilation Dependencies
$(BFILES) /dev/null: $(HFILES)



# Utility Targets
tidy    ::
#       remove files whose absence will not necessitate a re-make
	rm -f $(TRASH)

clean   :: tidy
#	remove intermediate files generated by compilation
	make -C MDP_Package clean
	make -C DTM_Package clean
	make -C DTMAnalytics clean
	make -C DTMBuilder clean
	make -C DTMIBuilder clean
	make -C DTMLearning clean
	make -C DTMScenarioMatch clean
	make -C DTMSelfLoop clean
	make -C DTMTesting clean
	make -C DTMTrajectoryEvaluation clean
	make -C DTMMakePNG clean
	make -C DTMMakeSeqMap clean
	rm -f $(TMP)

spotless::
#	remove all compilation files that can be regenerated
	make -C MDP_Package spotless
	make -C DTM_Package spotless
	make -C DTMAnalytics spotless
	make -C DTMBuilder spotless
	make -C DTMIBuilder spotless
	make -C DTMLearning spotless
	make -C DTMScenarioMatch spotless
	make -C DTMSelfLoop spotless
	make -C DTMTesting spotless
	make -C DTMTrajectoryEvaluation spotless
	make -C DTMMakePNG spotless
	make -C DTMMakeSeqMap spotless
	rm -f $(FINAL)
#	sccs clean


# Check source definitions by moving everything to another directory and
# seeing what's left or what mv failed to find.
checkmake:
	mkdir .defined
	- mv $(SOURCE) $(SUBDIRS) .defined
	mkdir .undefined
	- mv * .undefined
	- mv .undefined Undefined
	- mv .defined/* .
	rmdir .defined
	echo Files and directories \(ignore . and ..\) not defined in Makefile:
	@ ls -a Undefined

shar	: $(EXEC).shar
$(EXEC).shar : source
	shar -v -c -pX $(SOURCE) $(SUBDIRS) > $(EXEC).shar

lint    : $(HDRS) $(SRCS)
	lint $(LINTFLAGS) $(HDRS) $(SRCS)

#
# sccs commands
#

# Edit DESCRIP above before make'ing create.
create  :
	mkdir SCCS      # mkdir will fail if SCCS already exists
	sccs create $(SOURCE)
#       The following adds something more meaningful than the date
#       and time to the initial sccs comment.
	sccs cdc -r1.1 -y"$(DESCRIP)" SCCS

edit    :
# Edit all files at once so they all have the same version number.
# (Files added to SOURCE have to be handled specially to ensure this.)
	sccs edit $(SOURCE)

unedit	:
#	Undo an editing session, throwing away all changes.
	sccs unedit $(SOURCE)
	sccs clean

look    :
#	Check out the source code for examination, but not editing.
	sccs get $(SOURCE)

version :
#	Check in the source code after an editing session.
	sccs delta $(SOURCE)

update  :
#	Create a new version during an editing session AND continue editing.
	sccs deledit $(SOURCE)

